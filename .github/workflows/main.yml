name: Update PR source branch after merge

on:
  pull_request:
    types:
      - closed

jobs:
  update-branch:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

      - name: Update source branch with main
        id: merge_step
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

          git fetch origin main $BRANCH
          git checkout $BRANCH

          # Try to merge main
          if git merge origin/main --no-edit; then
            git push origin $BRANCH
            echo "merge_status=success" >> $GITHUB_OUTPUT
          else
            echo "merge_status=conflict" >> $GITHUB_OUTPUT
            git merge --abort || true
          fi

      - name: Handle conflict
        if: steps.merge_step.outputs.merge_status == 'conflict'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const branch = "${{ steps.merge_step.outputs.branch }}";
            const author = context.payload.pull_request.user.login;

            // Leave a comment tagging the PR author
            const message = `⚠️ Auto-update failed: Branch **${branch}** has conflicts with \`main\`. \n\nHey @${author}, please resolve manually.`;

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: prNumber,
              body: message,
            });

            // Assign the PR author
            await github.rest.issues.addAssignees({
              ...context.repo,
              issue_number: prNumber,
              assignees: [author],
            });

            // Request a review from the PR author
            await github.rest.pulls.requestReviewers({
              ...context.repo,
              pull_number: prNumber,
              reviewers: [author],
            });
